// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DaoContext))]
    partial class DaoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("SCA")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ApplicationCore.Entities.Acao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Acao","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Arquivo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Bytes")
                        .IsRequired();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("Extensao")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Arquivo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Assunto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<long>("EmpresaId");

                    b.Property<long?>("FluxoId");

                    b.Property<string>("HashArquivoModelo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Orientacoes");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("FluxoId");

                    b.ToTable("Assunto","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AssuntoArquivo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ArquivoId");

                    b.Property<long>("AssuntoId");

                    b.HasKey("Id");

                    b.HasIndex("ArquivoId");

                    b.HasIndex("AssuntoId", "ArquivoId")
                        .IsUnique();

                    b.ToTable("AssuntoArquivo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Audit.Audit_Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("Audit_Event","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Barragem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AlturaAtual");

                    b.Property<string>("Bairro");

                    b.Property<string>("CEP");

                    b.Property<int>("CategoriaRisco");

                    b.Property<string>("Classe")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasDefaultValue("A");

                    b.Property<string>("Complemento");

                    b.Property<int>("DanoPotencialAssociado");

                    b.Property<long>("EmpresaId");

                    b.Property<string>("Latitude")
                        .IsRequired();

                    b.Property<string>("Logradouro");

                    b.Property<string>("Longitude")
                        .IsRequired();

                    b.Property<string>("MetodoConstrutivo");

                    b.Property<long?>("MinerioPrincipalId")
                        .IsRequired();

                    b.Property<long?>("MunicipioId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Numero");

                    b.Property<string>("Posicionamento")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<float>("VolumeAtual");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("MinerioPrincipalId");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Barragem","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Empresa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Empresa","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EmpresaEndereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("EmpresaId")
                        .IsRequired();

                    b.Property<long?>("EnderecoId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("EmpresaEndereco","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro")
                        .HasMaxLength(200);

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Complemento")
                        .HasMaxLength(200);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("MunicipioId");

                    b.Property<string>("Numero")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Endereco","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Estado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("PaisId");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("Estado","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Fluxo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Descricao");

                    b.Property<string>("Observacao");

                    b.Property<int>("TramitarEm");

                    b.HasKey("Id");

                    b.ToTable("Fluxo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoAcao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FluxoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("FluxoId");

                    b.ToTable("FluxoAcao","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AcaoId");

                    b.Property<long>("FluxoId");

                    b.Property<long>("ProximaSituacaoId");

                    b.Property<long>("SituacaoAtualId");

                    b.HasKey("Id");

                    b.HasIndex("AcaoId");

                    b.HasIndex("FluxoId");

                    b.HasIndex("ProximaSituacaoId");

                    b.HasIndex("SituacaoAtualId");

                    b.ToTable("FluxoItem","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItemChecklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FluxoItemId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("FluxoItemId");

                    b.ToTable("FluxoItemChecklist","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItemSetor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("FluxoItemId");

                    b.Property<long>("SetorId");

                    b.HasKey("Id");

                    b.HasIndex("FluxoItemId");

                    b.HasIndex("SetorId");

                    b.ToTable("FluxoItemSetor","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItemTipoAnexo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ExigeAssinaturaDigital");

                    b.Property<long>("FluxoItemId");

                    b.Property<long>("FluxoTipoAnexoId");

                    b.Property<bool>("Obrigatorio");

                    b.HasKey("Id");

                    b.HasIndex("FluxoItemId");

                    b.HasIndex("FluxoTipoAnexoId");

                    b.ToTable("FluxoItemTipoAnexo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoSituacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("FluxoId")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("Padrao");

                    b.Property<int>("TipoSituacao");

                    b.Property<bool>("Turno");

                    b.HasKey("Id");

                    b.HasIndex("FluxoId");

                    b.ToTable("FluxoSituacao","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoTipoAnexo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("FluxoId")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("FluxoId");

                    b.ToTable("FluxoTipoAnexo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Insumo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AlteradoPorId");

                    b.Property<bool>("Ativo");

                    b.Property<long?>("CriadoPorId");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime?>("DataInativacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("FornecedorId");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("MarcaId");

                    b.Property<string>("Modelo")
                        .HasMaxLength(200);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Observacao")
                        .HasMaxLength(4000);

                    b.Property<string>("Patrimonio")
                        .HasMaxLength(200);

                    b.Property<long?>("SetorId");

                    b.Property<long?>("TipoInsumoId");

                    b.Property<long?>("UnidadeMedidaId");

                    b.HasKey("Id");

                    b.HasIndex("AlteradoPorId");

                    b.HasIndex("CriadoPorId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("SetorId");

                    b.HasIndex("TipoInsumoId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("Insumo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.LogIntegracao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataHoraFinalizacao");

                    b.Property<DateTime>("DataHoraInclusao");

                    b.Property<string>("Ocorrencia")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<int>("Situacao")
                        .HasMaxLength(1);

                    b.Property<int>("TipoIntegracao")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("LogIntegracao","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Logradouro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro")
                        .HasMaxLength(200);

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("EstadoId")
                        .IsRequired();

                    b.Property<long?>("MunicipioId")
                        .IsRequired();

                    b.Property<long?>("PaisId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("PaisId");

                    b.ToTable("Logradouro","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManutencaoInsumo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("EmpresaId")
                        .IsRequired();

                    b.Property<long?>("InsumoId")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("SetorId")
                        .IsRequired();

                    b.Property<int>("Situacao");

                    b.Property<long?>("TipoManutencaoId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("InsumoId");

                    b.HasIndex("SetorId");

                    b.HasIndex("TipoManutencaoId");

                    b.ToTable("ManutencaoInsumo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManutencaoInsumoAgendamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Data");

                    b.Property<long?>("Dia");

                    b.Property<DateTime?>("Hora");

                    b.Property<long>("ManutencaoInsumoId");

                    b.Property<long?>("Mes");

                    b.Property<int>("Situacao");

                    b.Property<int>("TipoManutencao");

                    b.HasKey("Id");

                    b.HasIndex("ManutencaoInsumoId");

                    b.ToTable("ManutencaoInsumoAgendamento","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManutencaoInsumoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AutorId");

                    b.Property<bool>("Cotar");

                    b.Property<long?>("InsumoId")
                        .IsRequired();

                    b.Property<long>("Item");

                    b.Property<long?>("ManutencaoInsumoId")
                        .IsRequired();

                    b.Property<float>("PrecoUnidade");

                    b.Property<float>("Quantidade");

                    b.Property<int>("Situacao");

                    b.Property<long?>("UnidadeMedidaId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("InsumoId");

                    b.HasIndex("ManutencaoInsumoId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("ManutencaoInsumoItem","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Marca", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Marca","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.MonitoramentoBarragem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BarragemId");

                    b.Property<long?>("ConsultoriaId");

                    b.Property<DateTime>("DataHora");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<float>("Nivel");

                    b.Property<long>("NivelMonitoramentoId");

                    b.Property<string>("Observacao")
                        .HasMaxLength(4000);

                    b.Property<long?>("SensorId");

                    b.Property<long>("TipoMonitoramentoId");

                    b.Property<long?>("UnidadeMedidaId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BarragemId");

                    b.HasIndex("ConsultoriaId");

                    b.HasIndex("NivelMonitoramentoId");

                    b.HasIndex("SensorId");

                    b.HasIndex("TipoMonitoramentoId");

                    b.HasIndex("UnidadeMedidaId");

                    b.ToTable("MonitoramentoBarragem","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Municipio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EstadoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Municipio","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.NivelMonitoramento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ControleDeNivel");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Nivel");

                    b.Property<string>("Observacao")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("NivelMonitoramento","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Norma", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Origem")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Versao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("VigenciaFinal");

                    b.Property<DateTime>("VigenciaInicial");

                    b.HasKey("Id");

                    b.ToTable("Norma","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Pais", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Pais","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Parametro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Tipo");

                    b.Property<string>("Valor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Parametro","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Celular")
                        .HasMaxLength(15);

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Telefone")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UltimaAlteracao");

                    b.HasKey("Id");

                    b.ToTable("Pessoa","SCA");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("ApplicationCore.Entities.PessoaEndereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("EnderecoId");

                    b.Property<long?>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("PessoaEndereco","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Processo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Ano");

                    b.Property<long>("AssuntoId");

                    b.Property<long?>("ConsultoriaId");

                    b.Property<DateTime>("Criacao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<long>("EmpresaId");

                    b.Property<long?>("NormaId");

                    b.Property<long?>("ResponsavelId");

                    b.Property<long>("Sequencial");

                    b.Property<long?>("SetorId");

                    b.Property<long>("SituacaoId");

                    b.Property<DateTime>("UltimaAltercao");

                    b.HasKey("Id");

                    b.HasIndex("AssuntoId");

                    b.HasIndex("ConsultoriaId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("NormaId");

                    b.HasIndex("ResponsavelId");

                    b.HasIndex("SetorId");

                    b.HasIndex("SituacaoId");

                    b.HasIndex("Sequencial", "Ano")
                        .IsUnique();

                    b.ToTable("Processo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProcessoAutor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AutorId");

                    b.Property<long>("ProcessoId");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("ProcessoId", "AutorId")
                        .IsUnique();

                    b.ToTable("ProcessoAutor","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProcessoTurno", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ProcessoId");

                    b.Property<long>("TurnoId");

                    b.HasKey("Id");

                    b.HasIndex("TurnoId");

                    b.HasIndex("ProcessoId", "TurnoId")
                        .IsUnique();

                    b.ToTable("ProcessoTurno","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataUltimaAfericao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("ResponsavelId");

                    b.Property<string>("TipoSensor")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("Sensor","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Setor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<long>("EmpresaId");

                    b.Property<bool>("MesmoEnderecoDaEmpresa");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<long?>("SetorPaiId");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("SetorPaiId");

                    b.ToTable("Setor","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SetorEndereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("EnderecoId")
                        .IsRequired();

                    b.Property<long?>("SetorId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("SetorId");

                    b.ToTable("SetorEndereco","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Situacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("Padrao");

                    b.Property<int>("TipoSituacao");

                    b.HasKey("Id");

                    b.ToTable("Situacao","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TipoAnexo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TipoAnexo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TipoInsumo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TipoInsumo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TipoManutencao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TipoManutencao","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TipoMinerio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TipoMinerio","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TipoMonitoramento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.ToTable("TipoMonitoramento","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Tramite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AcaoId");

                    b.Property<DateTime?>("DataTramite");

                    b.Property<bool>("EnviarEmailAutores");

                    b.Property<string>("EnviarEmailsPara")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<long>("ProcessoId");

                    b.Property<long>("ResponsavelId");

                    b.Property<long>("SetorId");

                    b.Property<long>("SituacaoDoProcessoNoTramiteId");

                    b.Property<long>("SituacaoId");

                    b.Property<bool>("Tramitado");

                    b.HasKey("Id");

                    b.HasIndex("AcaoId");

                    b.HasIndex("ProcessoId");

                    b.HasIndex("ResponsavelId");

                    b.HasIndex("SetorId");

                    b.HasIndex("SituacaoDoProcessoNoTramiteId");

                    b.HasIndex("SituacaoId");

                    b.ToTable("Tramite","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TramiteArquivo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ArquivoId");

                    b.Property<long?>("FluxoItemTipoAnexoId");

                    b.Property<long>("TramiteId");

                    b.HasKey("Id");

                    b.HasIndex("ArquivoId");

                    b.HasIndex("FluxoItemTipoAnexoId");

                    b.HasIndex("TramiteId", "ArquivoId")
                        .IsUnique();

                    b.ToTable("TramiteArquivo","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.TramiteChecklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Checado");

                    b.Property<long>("FluxoItemChecklistId");

                    b.Property<long>("TramiteId");

                    b.HasKey("Id");

                    b.HasIndex("FluxoItemChecklistId");

                    b.HasIndex("TramiteId");

                    b.ToTable("TramiteChecklist","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Turno", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("HoraInicio");

                    b.Property<DateTime>("HoralTerminal");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.ToTable("Turno","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UnidadeMedida", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("UnidadeMedida","SCA");
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserSetor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("SetorId");

                    b.Property<long?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SetorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSetor","SCA");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Autor", b =>
                {
                    b.HasBaseType("ApplicationCore.Entities.Pessoa");

                    b.Property<DateTime>("DataNascimento");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.ToTable("Autor","SCA");

                    b.HasDiscriminator().HasValue("Autor");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Consultoria", b =>
                {
                    b.HasBaseType("ApplicationCore.Entities.Pessoa");

                    b.Property<string>("RasaoSocial")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasIndex("CpfCnpj")
                        .IsUnique()
                        .HasName("IX_Pessoa_CpfCnpj1");

                    b.ToTable("Consultoria","SCA");

                    b.HasDiscriminator().HasValue("Consultoria");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Fornecedor", b =>
                {
                    b.HasBaseType("ApplicationCore.Entities.Pessoa");

                    b.Property<string>("RasaoSocial")
                        .IsRequired()
                        .HasColumnName("Fornecedor_RasaoSocial")
                        .HasMaxLength(200);

                    b.Property<string>("Site")
                        .HasColumnName("Fornecedor_Site")
                        .HasMaxLength(200);

                    b.HasIndex("CpfCnpj")
                        .IsUnique()
                        .HasName("IX_Pessoa_CpfCnpj2");

                    b.ToTable("Fornecedor","SCA");

                    b.HasDiscriminator().HasValue("Fornecedor");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Arquivo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Assunto", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Empresa", "Empresa")
                        .WithMany("Assuntos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Fluxo", "Fluxo")
                        .WithMany("Assuntos")
                        .HasForeignKey("FluxoId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.AssuntoArquivo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Arquivo", "Arquivo")
                        .WithMany()
                        .HasForeignKey("ArquivoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Assunto", "Assunto")
                        .WithMany("AssuntoArquivos")
                        .HasForeignKey("AssuntoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Barragem", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.TipoMinerio", "MinerioPrincipal")
                        .WithMany()
                        .HasForeignKey("MinerioPrincipalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.EmpresaEndereco", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Empresa", "Empresa")
                        .WithMany("EmpresaEnderecos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Endereco", "Endereco")
                        .WithMany("EmpresaEnderecos")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Endereco", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Estado", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Pais", "Pais")
                        .WithMany("Estados")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoAcao", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Fluxo", "Fluxo")
                        .WithMany("Acoes")
                        .HasForeignKey("FluxoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItem", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FluxoAcao", "Acao")
                        .WithMany()
                        .HasForeignKey("AcaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Fluxo", "Fluxo")
                        .WithMany("FluxoItems")
                        .HasForeignKey("FluxoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FluxoSituacao", "ProximaSituacao")
                        .WithMany()
                        .HasForeignKey("ProximaSituacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FluxoSituacao", "SituacaoAtual")
                        .WithMany()
                        .HasForeignKey("SituacaoAtualId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItemChecklist", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FluxoItem", "FluxoItem")
                        .WithMany("FluxoItemChecklists")
                        .HasForeignKey("FluxoItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItemSetor", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FluxoItem", "FluxoItem")
                        .WithMany("FluxoItemSetores")
                        .HasForeignKey("FluxoItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoItemTipoAnexo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FluxoItem", "FluxoItem")
                        .WithMany("FluxoItemTiposAnexo")
                        .HasForeignKey("FluxoItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FluxoTipoAnexo", "FluxoTipoAnexo")
                        .WithMany()
                        .HasForeignKey("FluxoTipoAnexoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoSituacao", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Fluxo", "Fluxo")
                        .WithMany("Situacoes")
                        .HasForeignKey("FluxoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.FluxoTipoAnexo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Fluxo", "Fluxo")
                        .WithMany("TiposAnexo")
                        .HasForeignKey("FluxoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Identity.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Insumo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Identity.User", "AlteradoPor")
                        .WithMany()
                        .HasForeignKey("AlteradoPorId");

                    b.HasOne("ApplicationCore.Entities.Identity.User", "CriadoPor")
                        .WithMany()
                        .HasForeignKey("CriadoPorId");

                    b.HasOne("ApplicationCore.Entities.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId");

                    b.HasOne("ApplicationCore.Entities.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId");

                    b.HasOne("ApplicationCore.Entities.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId");

                    b.HasOne("ApplicationCore.Entities.TipoInsumo", "TipoInsumo")
                        .WithMany()
                        .HasForeignKey("TipoInsumoId");

                    b.HasOne("ApplicationCore.Entities.UnidadeMedida", "UnidadeMedida")
                        .WithMany()
                        .HasForeignKey("UnidadeMedidaId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Logradouro", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Estado", "Estado")
                        .WithMany("Logradouros")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Municipio", "Municipio")
                        .WithMany("Logradouros")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Pais", "Pais")
                        .WithMany("Logradouros")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManutencaoInsumo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.TipoManutencao", "TipoManutencao")
                        .WithMany()
                        .HasForeignKey("TipoManutencaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManutencaoInsumoAgendamento", b =>
                {
                    b.HasOne("ApplicationCore.Entities.ManutencaoInsumo", "ManutencaoInsumo")
                        .WithMany()
                        .HasForeignKey("ManutencaoInsumoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ManutencaoInsumoItem", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Autor", "Autor")
                        .WithMany()
                        .HasForeignKey("AutorId");

                    b.HasOne("ApplicationCore.Entities.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.ManutencaoInsumo", "ManutencaoInsumo")
                        .WithMany("ManutencaoInsumoItens")
                        .HasForeignKey("ManutencaoInsumoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.UnidadeMedida", "UnidadeMedida")
                        .WithMany()
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.MonitoramentoBarragem", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Barragem", "Barragem")
                        .WithMany()
                        .HasForeignKey("BarragemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Consultoria", "Consultoria")
                        .WithMany()
                        .HasForeignKey("ConsultoriaId");

                    b.HasOne("ApplicationCore.Entities.NivelMonitoramento", "NivelMonitoramento")
                        .WithMany()
                        .HasForeignKey("NivelMonitoramentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId");

                    b.HasOne("ApplicationCore.Entities.TipoMonitoramento", "TipoMonitoramento")
                        .WithMany()
                        .HasForeignKey("TipoMonitoramentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.UnidadeMedida", "UnidadeMedida")
                        .WithMany()
                        .HasForeignKey("UnidadeMedidaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Municipio", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Estado", "Estado")
                        .WithMany("Municipios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.PessoaEndereco", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId");

                    b.HasOne("ApplicationCore.Entities.Pessoa", "Pessoa")
                        .WithMany("PessoaEnderecos")
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Processo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Assunto", "Assunto")
                        .WithMany()
                        .HasForeignKey("AssuntoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Consultoria", "Consultoria")
                        .WithMany()
                        .HasForeignKey("ConsultoriaId");

                    b.HasOne("ApplicationCore.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Norma", "Norma")
                        .WithMany()
                        .HasForeignKey("NormaId");

                    b.HasOne("ApplicationCore.Entities.Identity.User", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelId");

                    b.HasOne("ApplicationCore.Entities.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId");

                    b.HasOne("ApplicationCore.Entities.FluxoSituacao", "Situacao")
                        .WithMany()
                        .HasForeignKey("SituacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProcessoAutor", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Autor", "Autor")
                        .WithMany("ProcessoAutores")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Processo", "Processo")
                        .WithMany("ProcessoAutores")
                        .HasForeignKey("ProcessoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.ProcessoTurno", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Processo", "Processo")
                        .WithMany()
                        .HasForeignKey("ProcessoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Turno", "Turno")
                        .WithMany()
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Sensor", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Autor", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Setor", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Empresa", "Empresa")
                        .WithMany("Setores")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Setor", "SetorPai")
                        .WithMany("SetoresFilhos")
                        .HasForeignKey("SetorPaiId");
                });

            modelBuilder.Entity("ApplicationCore.Entities.SetorEndereco", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Endereco", "Endereco")
                        .WithMany("SetorEnderecos")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Setor", "Setor")
                        .WithMany("SetorEnderecos")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Tramite", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FluxoAcao", "Acao")
                        .WithMany()
                        .HasForeignKey("AcaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Processo", "Processo")
                        .WithMany("Tramites")
                        .HasForeignKey("ProcessoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Identity.User", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FluxoSituacao", "SituacaoDoProcessoNoTramite")
                        .WithMany()
                        .HasForeignKey("SituacaoDoProcessoNoTramiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FluxoSituacao", "Situacao")
                        .WithMany()
                        .HasForeignKey("SituacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.TramiteArquivo", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Arquivo", "Arquivo")
                        .WithMany()
                        .HasForeignKey("ArquivoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.FluxoItemTipoAnexo", "FluxoItemTipoAnexo")
                        .WithMany()
                        .HasForeignKey("FluxoItemTipoAnexoId");

                    b.HasOne("ApplicationCore.Entities.Tramite", "Tramite")
                        .WithMany("TramiteArquivos")
                        .HasForeignKey("TramiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.TramiteChecklist", b =>
                {
                    b.HasOne("ApplicationCore.Entities.FluxoItemChecklist", "FluxoItemChecklist")
                        .WithMany("TramiteChecklists")
                        .HasForeignKey("FluxoItemChecklistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Tramite", "Tramite")
                        .WithMany("TramiteChecklists")
                        .HasForeignKey("TramiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationCore.Entities.UserSetor", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Setor", "Setor")
                        .WithMany()
                        .HasForeignKey("SetorId");

                    b.HasOne("ApplicationCore.Entities.Identity.User", "User")
                        .WithMany("UserSetores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
